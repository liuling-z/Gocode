package main

import "fmt"

//Go语言闭包（Closure）——引用了外部变量的匿名函数
func main() {
	//Go语言中闭包是引用了自由变量的函数，被引用的自由变量和函数一同存在，
	//即使已经离开了自由变量的环境也不会被释放或者删除，在闭包中可以继续使用这个自由变量，因此，简单的说：
	//函数 + 引用环境 = 闭包
	//闭包（Closure）在某些编程语言中也被称为 Lambda 表达式。

	//在闭包内部修改引用的变量
	//闭包对它作用域上部的变量可以进行修改，修改引用的变量会对变量进行实际修改，通过下面的例子来理解：
	// 准备一个字符串
	str := "hello world"
	fmt.Println(str)
	// 创建一个匿名函数
	foo := func() {

		// 匿名函数中访问str
		str = "hello dude"
	}
	// 调用匿名函数
	foo()
	fmt.Println(str)
	//代码说明如下：
	//
	//    第 2 行，准备一个字符串用于修改。
	//    第 5 行，创建一个匿名函数。
	//    第 8 行，在匿名函数中并没有定义 str，str 的定义在匿名函数之前，此时，str 就被引用到了匿名函数中形成了闭包。
	//    第 12 行，执行闭包，此时 str 发生修改，变为 hello dude。
}
